From fa7cae717281b18eed3b6d4a38315a82084661b5 Mon Sep 17 00:00:00 2001
From: AnilKumar Ch <anilkumar@ti.com>
Date: Fri, 20 Jan 2012 14:31:24 +0545
Subject: [PATCH 0736/1092] am335x: mpu voltage domain tolerance modification

This patch modifies the mpu tolerance to 4% to provide the maximum
voltage limit while requesting for a new voltage. 4% value is taken
from am33xx datasheet

Signed-off-by: AnilKumar Ch <anilkumar@ti.com>
---
 drivers/cpufreq/omap-cpufreq.c | 10 +++++++---
 1 file changed, 7 insertions(+), 3 deletions(-)

diff --git a/drivers/cpufreq/omap-cpufreq.c b/drivers/cpufreq/omap-cpufreq.c
index f3e1922..8332912 100644
--- a/drivers/cpufreq/omap-cpufreq.c
+++ b/drivers/cpufreq/omap-cpufreq.c
@@ -38,7 +38,11 @@
 
 #include <mach/hardware.h>
 
-#define DEFAULT_RESOLUTION 12500
+/* Tolerance for MPU voltage is 4%, we have to pass +4% as a
+ * maximum voltage while setting the MPU regulator voltage.
+ * Which is taken from AM33XX datasheet */
+#define MPU_TOLERANCE	4
+#define PER_ROUND_VAL	100
 
 #ifdef CONFIG_SMP
 struct lpj_info {
@@ -136,7 +140,7 @@ static int omap_target(struct cpufreq_policy *policy,
 
 	if (freqs.new > freqs.old) {
 		ret = regulator_set_voltage(mpu_reg, volt_new,
-			volt_new + DEFAULT_RESOLUTION - 1);
+			volt_new + (volt_new * MPU_TOLERANCE) / PER_ROUND_VAL);
 		if (ret) {
 			dev_err(mpu_dev, "%s: unable to set voltage to %d uV (for %u MHz)\n",
 				__func__, volt_new, freqs.new/1000);
@@ -187,7 +191,7 @@ static int omap_target(struct cpufreq_policy *policy,
 
 	if (freqs.new < freqs.old) {
 		ret = regulator_set_voltage(mpu_reg, volt_new,
-			volt_new + DEFAULT_RESOLUTION - 1);
+			volt_new + (volt_new * MPU_TOLERANCE) / PER_ROUND_VAL);
 		if (ret) {
 			unsigned int temp;
 
-- 
1.7.11.2

