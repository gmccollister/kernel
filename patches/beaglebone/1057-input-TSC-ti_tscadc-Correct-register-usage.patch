From 32b04ace67e4b628a8a0ddd45a4f277bfa0a84e6 Mon Sep 17 00:00:00 2001
From: "Patil, Rachna" <rachna@ti.com>
Date: Fri, 10 Aug 2012 12:34:06 +0530
Subject: [PATCH 1057/1092] input: TSC: ti_tscadc: Correct register usage

This patch cleans up the wrong register definitions and
usage for touchscreen controller.
Bit masks were not defined earlier.

For ex: consider a register define as:
write(xyz, ABC)
ABC is expected to be written to register bits 0-11.
Here we see that value written is as expected, but this write
is also affecting all the remaining bits of xyz.
The remaining bits hold the default value as 0 and the write
also sets it to zero. Hence wrong usage were not causing user
visible bugs.
Due to these reasons it was difficult to follow when
compared with TRM.

Unused definitions are also removed.
Since there is change in some naming convention because of
all the above mentioned reasons, the same has been
updated throughout the code.
Bit declarations are grouped to increase readability.

Signed-off-by: Patil, Rachna <rachna@ti.com>
---
 drivers/input/touchscreen/ti_tscadc.c | 128 ++++++++++++++++++++++------------
 1 file changed, 82 insertions(+), 46 deletions(-)

diff --git a/drivers/input/touchscreen/ti_tscadc.c b/drivers/input/touchscreen/ti_tscadc.c
index 197f603..7745377 100644
--- a/drivers/input/touchscreen/ti_tscadc.c
+++ b/drivers/input/touchscreen/ti_tscadc.c
@@ -55,50 +55,83 @@
 #define TSCADC_REG_FIFO1		0x200
 
 /*	Register Bitfields	*/
+/* IRQ wakeup enable */
 #define TSCADC_IRQWKUP_ENB		BIT(0)
-#define TSCADC_IRQWKUP_DISABLE		0x00
-#define TSCADC_STPENB_STEPENB		0x7FFF
-#define TSCADC_IRQENB_FIFO0THRES	BIT(2)
+
+/* Step Enable */
+#define TSCADC_STEPENB_MASK		(0x1FFFF << 0)
+#define TSCADC_STEPENB(val)		((val) << 0)
+#define TSCADC_STPENB_STEPENB		TSCADC_STEPENB(0x7FFF)
+
+/* IRQ enable */
 #define TSCADC_IRQENB_FIFO1THRES	BIT(5)
 #define TSCADC_IRQENB_PENUP		BIT(9)
 #define TSCADC_IRQENB_HW_PEN		BIT(0)
-#define TSCADC_STEPCONFIG_MODE_HWSYNC	0x2
-#define TSCADC_STEPCONFIG_2SAMPLES_AVG	(1 << 4)
+
+/* Step Configuration */
+#define TSCADC_STEPCONFIG_MODE_MASK	(3 << 0)
+#define TSCADC_STEPCONFIG_MODE(val)	((val) << 0)
+#define TSCADC_STEPCONFIG_MODE_HWSYNC	TSCADC_STEPCONFIG_MODE(2)
+#define TSCADC_STEPCONFIG_AVG_MASK	(7 << 2)
+#define TSCADC_STEPCONFIG_AVG(val)	((val) << 2)
+#define TSCADC_STEPCONFIG_AVG_16	TSCADC_STEPCONFIG_AVG(4)
 #define TSCADC_STEPCONFIG_XPP		BIT(5)
 #define TSCADC_STEPCONFIG_XNN		BIT(6)
 #define TSCADC_STEPCONFIG_YPP		BIT(7)
 #define TSCADC_STEPCONFIG_YNN		BIT(8)
 #define TSCADC_STEPCONFIG_XNP		BIT(9)
 #define TSCADC_STEPCONFIG_YPN		BIT(10)
-#define TSCADC_STEPCONFIG_RFP		(1 << 12)
-#define TSCADC_STEPCONFIG_INM		(1 << 18)
-#define TSCADC_STEPCONFIG_INP_4		(1 << 19)
-#define TSCADC_STEPCONFIG_INP		(1 << 20)
-#define TSCADC_STEPCONFIG_INP_5		(1 << 21)
-#define TSCADC_STEPCONFIG_FIFO1		(1 << 26)
-#define TSCADC_STEPCONFIG_IDLE_INP	(1 << 22)
-#define TSCADC_STEPCONFIG_OPENDLY	0x018
-#define TSCADC_STEPCONFIG_SAMPLEDLY	0x88
-#define TSCADC_STEPCONFIG_Z1		(3 << 19)
-#define TSCADC_STEPCHARGE_INM_SWAP	BIT(16)
-#define TSCADC_STEPCHARGE_INM		BIT(15)
-#define TSCADC_STEPCHARGE_INP_SWAP	BIT(20)
-#define TSCADC_STEPCHARGE_INP		BIT(19)
-#define TSCADC_STEPCHARGE_RFM		(1 << 23)
-#define TSCADC_STEPCHARGE_DELAY		0x1
+#define TSCADC_STEPCONFIG_INM_MASK	(0xF << 15)
+#define TSCADC_STEPCONFIG_INM(val)	((val) << 15)
+#define TSCADC_STEPCONFIG_INM_ADCREFM	TSCADC_STEPCONFIG_INM(8)
+#define TSCADC_STEPCONFIG_INP_MASK	(0xF << 19)
+#define TSCADC_STEPCONFIG_INP(val)	((val) << 19)
+#define TSCADC_STEPCONFIG_INP_AN2	TSCADC_STEPCONFIG_INP(2)
+#define TSCADC_STEPCONFIG_INP_AN3	TSCADC_STEPCONFIG_INP(3)
+#define TSCADC_STEPCONFIG_INP_AN4	TSCADC_STEPCONFIG_INP(4)
+#define TSCADC_STEPCONFIG_INP_ADCREFM	TSCADC_STEPCONFIG_INP(8)
+#define TSCADC_STEPCONFIG_FIFO1		BIT(26)
+
+/* Delay register */
+#define TSCADC_STEPDELAY_OPEN_MASK	(0x3FFFF << 0)
+#define TSCADC_STEPDELAY_OPEN(val)	((val) << 0)
+#define TSCADC_STEPCONFIG_OPENDLY	TSCADC_STEPDELAY_OPEN(0x098)
+#define TSCADC_STEPDELAY_SAMPLE_MASK	(0xFF << 24)
+#define TSCADC_STEPDELAY_SAMPLE(val)	((val) << 24)
+#define TSCADC_STEPCONFIG_SAMPLEDLY	TSCADC_STEPDELAY_SAMPLE(0)
+
+/* Charge Config */
+#define TSCADC_STEPCHARGE_RFP_MASK	(7 << 12)
+#define TSCADC_STEPCHARGE_RFP(val)	((val) << 12)
+#define TSCADC_STEPCHARGE_RFP_XPUL	TSCADC_STEPCHARGE_RFP(1)
+#define TSCADC_STEPCHARGE_INM_MASK	(0xF << 15)
+#define TSCADC_STEPCHARGE_INM(val)	((val) << 15)
+#define TSCADC_STEPCHARGE_INM_AN1	TSCADC_STEPCHARGE_INM(1)
+#define TSCADC_STEPCHARGE_INP_MASK	(0xF << 19)
+#define TSCADC_STEPCHARGE_INP(val)	((val) << 19)
+#define TSCADC_STEPCHARGE_INP_AN1	TSCADC_STEPCHARGE_INP(1)
+#define TSCADC_STEPCHARGE_RFM_MASK	(3 << 23)
+#define TSCADC_STEPCHARGE_RFM(val)	((val) << 23)
+#define TSCADC_STEPCHARGE_RFM_XNUR	TSCADC_STEPCHARGE_RFM(1)
+
+/* Charge delay */
+#define TSCADC_CHARGEDLY_OPEN_MASK	(0x3FFFF << 0)
+#define TSCADC_CHARGEDLY_OPEN(val)	((val) << 0)
+#define TSCADC_CHARGEDLY_OPENDLY	TSCADC_CHARGEDLY_OPEN(1)
+
+/* Control register */
 #define TSCADC_CNTRLREG_TSCSSENB	BIT(0)
 #define TSCADC_CNTRLREG_STEPID		BIT(1)
 #define TSCADC_CNTRLREG_STEPCONFIGWRT	BIT(2)
 #define TSCADC_CNTRLREG_POWERDOWN	BIT(4)
+#define TSCADC_CNTRLREG_AFE_CTRL_MASK	(3 << 5)
+#define TSCADC_CNTRLREG_AFE_CTRL(val)	((val) << 5)
+#define TSCADC_CNTRLREG_4WIRE		TSCADC_CNTRLREG_AFE_CTRL(1)
+#define TSCADC_CNTRLREG_5WIRE		TSCADC_CNTRLREG_AFE_CTRL(2)
+#define TSCADC_CNTRLREG_8WIRE		TSCADC_CNTRLREG_AFE_CTRL(3)
 #define TSCADC_CNTRLREG_TSCENB		BIT(7)
-#define TSCADC_CNTRLREG_4WIRE		(0x1 << 5)
-#define TSCADC_CNTRLREG_5WIRE		(0x1 << 6)
-#define TSCADC_CNTRLREG_8WIRE		(0x3 << 5)
-#define TSCADC_ADCFSM_STEPID		0x10
-#define TSCADC_ADCFSM_FSM		BIT(5)
 
 #define ADC_CLK				3000000
-
 #define MAX_12BIT                       ((1 << 12) - 1)
 
 int pen = 1;
@@ -136,20 +169,21 @@ static void tsc_step_config(struct tscadc *ts_dev)
 	delay = TSCADC_STEPCONFIG_SAMPLEDLY | TSCADC_STEPCONFIG_OPENDLY;
 
 	stepconfigx = TSCADC_STEPCONFIG_MODE_HWSYNC |
-			TSCADC_STEPCONFIG_2SAMPLES_AVG | TSCADC_STEPCONFIG_XPP;
+			TSCADC_STEPCONFIG_AVG_16 | TSCADC_STEPCONFIG_XPP;
 
 	switch (ts_dev->wires) {
 	case 4:
-		stepconfigx |= TSCADC_STEPCONFIG_INP |
+		stepconfigx |= TSCADC_STEPCONFIG_INP_AN2 |
 				TSCADC_STEPCONFIG_XNN;
 		break;
 	case 5:
 		stepconfigx |= TSCADC_STEPCONFIG_YNN |
-				TSCADC_STEPCONFIG_INP_5 | TSCADC_STEPCONFIG_XNN |
+				TSCADC_STEPCONFIG_INP_AN4 |
+				TSCADC_STEPCONFIG_XNN |
 				TSCADC_STEPCONFIG_YPP;
 		break;
 	case 8:
-		stepconfigx |= TSCADC_STEPCONFIG_INP |
+		stepconfigx |= TSCADC_STEPCONFIG_INP_AN2 |
 				TSCADC_STEPCONFIG_XNN;
 		break;
 	}
@@ -160,15 +194,16 @@ static void tsc_step_config(struct tscadc *ts_dev)
 	}
 
 	stepconfigy = TSCADC_STEPCONFIG_MODE_HWSYNC |
-			TSCADC_STEPCONFIG_2SAMPLES_AVG | TSCADC_STEPCONFIG_YNN |
-			TSCADC_STEPCONFIG_INM | TSCADC_STEPCONFIG_FIFO1;
+			TSCADC_STEPCONFIG_AVG_16 | TSCADC_STEPCONFIG_YNN |
+			TSCADC_STEPCONFIG_INM_ADCREFM | TSCADC_STEPCONFIG_FIFO1;
 	switch (ts_dev->wires) {
 	case 4:
 		stepconfigy |= TSCADC_STEPCONFIG_YPP;
 		break;
 	case 5:
-		stepconfigy |= TSCADC_STEPCONFIG_XPP | TSCADC_STEPCONFIG_INP_5 |
-			TSCADC_STEPCONFIG_XNP | TSCADC_STEPCONFIG_YPN;
+		stepconfigy |= TSCADC_STEPCONFIG_XPP |
+			TSCADC_STEPCONFIG_INP_AN4 | TSCADC_STEPCONFIG_XNP |
+			TSCADC_STEPCONFIG_YPN;
 		break;
 	case 8:
 		stepconfigy |= TSCADC_STEPCONFIG_YPP;
@@ -181,17 +216,17 @@ static void tsc_step_config(struct tscadc *ts_dev)
 	}
 
 	chargeconfig = TSCADC_STEPCONFIG_XPP | TSCADC_STEPCONFIG_YNN |
-			TSCADC_STEPCONFIG_RFP | TSCADC_STEPCHARGE_RFM |
-			TSCADC_STEPCHARGE_INM | TSCADC_STEPCHARGE_INP;
+			TSCADC_STEPCHARGE_RFP_XPUL |
+			TSCADC_STEPCHARGE_RFM_XNUR |
+			TSCADC_STEPCHARGE_INM_AN1 | TSCADC_STEPCHARGE_INP_AN1;
 	tscadc_writel(ts_dev, TSCADC_REG_CHARGECONFIG, chargeconfig);
-	tscadc_writel(ts_dev, TSCADC_REG_CHARGEDELAY, TSCADC_STEPCHARGE_DELAY);
+	tscadc_writel(ts_dev, TSCADC_REG_CHARGEDELAY, TSCADC_CHARGEDLY_OPENDLY);
 
 	 /* Configure to calculate pressure */
 	stepconfigz1 = TSCADC_STEPCONFIG_MODE_HWSYNC |
-				TSCADC_STEPCONFIG_2SAMPLES_AVG |
-				TSCADC_STEPCONFIG_XNP |
-				TSCADC_STEPCONFIG_YPN | TSCADC_STEPCONFIG_INM;
-	stepconfigz2 = stepconfigz1 | TSCADC_STEPCONFIG_Z1 |
+			TSCADC_STEPCONFIG_AVG_16 | TSCADC_STEPCONFIG_XNP |
+			TSCADC_STEPCONFIG_YPN | TSCADC_STEPCONFIG_INM_ADCREFM;
+	stepconfigz2 = stepconfigz1 | TSCADC_STEPCONFIG_INP_AN3 |
 				TSCADC_STEPCONFIG_FIFO1;
 	tscadc_writel(ts_dev, TSCADC_REG_STEPCONFIG13, stepconfigz1);
 	tscadc_writel(ts_dev, TSCADC_REG_STEPDELAY13, delay);
@@ -206,8 +241,8 @@ static void tsc_idle_config(struct tscadc *ts_config)
 	/* Idle mode touch screen config */
 	unsigned int	 idleconfig;
 
-	idleconfig = TSCADC_STEPCONFIG_YNN | TSCADC_STEPCONFIG_INM |
-			TSCADC_STEPCONFIG_IDLE_INP | TSCADC_STEPCONFIG_YPN;
+	idleconfig = TSCADC_STEPCONFIG_YNN | TSCADC_STEPCONFIG_INM_ADCREFM |
+			TSCADC_STEPCONFIG_INP_ADCREFM | TSCADC_STEPCONFIG_YPN;
 
 	tscadc_writel(ts_config, TSCADC_REG_IDLECONFIG, idleconfig);
 }
@@ -548,8 +583,9 @@ static int tscadc_resume(struct platform_device *pdev)
 	pm_runtime_get_sync(&pdev->dev);
 
 	if (device_may_wakeup(&pdev->dev)) {
-		tscadc_writel(ts_dev, TSCADC_REG_IRQWAKEUP,
-				TSCADC_IRQWKUP_DISABLE);
+		restore = tscadc_readl(ts_dev, TSCADC_REG_IRQWAKEUP);
+		restore &= ~(TSCADC_IRQWKUP_ENB);
+		tscadc_writel(ts_dev, TSCADC_REG_IRQWAKEUP, restore);
 		tscadc_writel(ts_dev, TSCADC_REG_IRQCLR, TSCADC_IRQENB_HW_PEN);
 	}
 
-- 
1.7.11.2

