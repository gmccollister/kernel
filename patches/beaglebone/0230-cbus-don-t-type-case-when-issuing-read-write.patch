From 52dcbc55afedc31630dffc684d8aef3be40b62cd Mon Sep 17 00:00:00 2001
From: Felipe Balbi <felipe.balbi@nokia.com>
Date: Mon, 26 Apr 2010 18:20:22 -0700
Subject: [PATCH 0230/1092] cbus: don't type case when issuing read/write

avoid type casting, fix the types used.

Signed-off-by: Felipe Balbi <felipe.balbi@nokia.com>
---
 drivers/cbus/cbus.c  | 4 ++--
 drivers/cbus/cbus.h  | 4 ++--
 drivers/cbus/retu.c  | 6 +++---
 drivers/cbus/retu.h  | 6 +++---
 drivers/cbus/tahvo.c | 6 +++---
 drivers/cbus/tahvo.h | 6 +++---
 6 files changed, 16 insertions(+), 16 deletions(-)

diff --git a/drivers/cbus/cbus.c b/drivers/cbus/cbus.c
index 734e794..67c59ba 100644
--- a/drivers/cbus/cbus.c
+++ b/drivers/cbus/cbus.c
@@ -130,7 +130,7 @@ static int cbus_transfer(struct cbus_host *host, unsigned rw, unsigned dev,
 /*
  * Read a given register from the device
  */
-int cbus_read_reg(int dev, int reg)
+int cbus_read_reg(unsigned dev, unsigned reg)
 {
 	return cbus_transfer(cbus_host, CBUS_XFER_READ, dev, reg, 0);
 }
@@ -139,7 +139,7 @@ EXPORT_SYMBOL(cbus_read_reg);
 /*
  * Write to a given register of the device
  */
-int cbus_write_reg(int dev, int reg, int val)
+int cbus_write_reg(unsigned dev, unsigned reg, unsigned val)
 {
 	return cbus_transfer(cbus_host, CBUS_XFER_WRITE, dev, reg, val);
 }
diff --git a/drivers/cbus/cbus.h b/drivers/cbus/cbus.h
index fbaca09..62f1874 100644
--- a/drivers/cbus/cbus.h
+++ b/drivers/cbus/cbus.h
@@ -32,7 +32,7 @@ struct cbus_host {
 	int	sel_gpio;
 };
 
-extern int cbus_read_reg(int dev, int reg);
-extern int cbus_write_reg(int dev, int reg, int val);
+extern int cbus_read_reg(unsigned dev, unsigned reg);
+extern int cbus_write_reg(unsigned dev, unsigned reg, unsigned val);
 
 #endif /* __DRIVERS_CBUS_CBUS_H */
diff --git a/drivers/cbus/retu.c b/drivers/cbus/retu.c
index 35fdd11..80a2acc 100644
--- a/drivers/cbus/retu.c
+++ b/drivers/cbus/retu.c
@@ -78,7 +78,7 @@ EXPORT_SYMBOL(retu_get_status);
  *
  * This function returns the contents of the specified register
  */
-int retu_read_reg(int reg)
+int retu_read_reg(unsigned reg)
 {
 	BUG_ON(!retu_initialized);
 	return cbus_read_reg(RETU_ID, reg);
@@ -91,13 +91,13 @@ int retu_read_reg(int reg)
  *
  * This function writes a value to the specified register
  */
-void retu_write_reg(int reg, u16 val)
+void retu_write_reg(unsigned reg, u16 val)
 {
 	BUG_ON(!retu_initialized);
 	cbus_write_reg(RETU_ID, reg, val);
 }
 
-void retu_set_clear_reg_bits(int reg, u16 set, u16 clear)
+void retu_set_clear_reg_bits(unsigned reg, u16 set, u16 clear)
 {
 	unsigned long flags;
 	u16 w;
diff --git a/drivers/cbus/retu.h b/drivers/cbus/retu.h
index fbd1981..cf3cf20 100644
--- a/drivers/cbus/retu.h
+++ b/drivers/cbus/retu.h
@@ -58,9 +58,9 @@
 #define	MAX_RETU_IRQ_HANDLERS	16
 
 int retu_get_status(void);
-int retu_read_reg(int reg);
-void retu_write_reg(int reg, u16 val);
-void retu_set_clear_reg_bits(int reg, u16 set, u16 clear);
+int retu_read_reg(unsigned reg);
+void retu_write_reg(unsigned reg, u16 val);
+void retu_set_clear_reg_bits(unsigned reg, u16 set, u16 clear);
 int retu_read_adc(int channel);
 int retu_request_irq(int id, void *irq_handler, unsigned long arg, char *name);
 void retu_free_irq(int id);
diff --git a/drivers/cbus/tahvo.c b/drivers/cbus/tahvo.c
index 6828acc..d8fa90a 100644
--- a/drivers/cbus/tahvo.c
+++ b/drivers/cbus/tahvo.c
@@ -78,7 +78,7 @@ EXPORT_SYMBOL(tahvo_get_status);
  *
  * This function returns the contents of the specified register
  */
-int tahvo_read_reg(int reg)
+int tahvo_read_reg(unsigned reg)
 {
 	BUG_ON(!tahvo_initialized);
 	return cbus_read_reg(TAHVO_ID, reg);
@@ -91,7 +91,7 @@ int tahvo_read_reg(int reg)
  *
  * This function writes a value to the specified register
  */
-void tahvo_write_reg(int reg, u16 val)
+void tahvo_write_reg(unsigned reg, u16 val)
 {
 	BUG_ON(!tahvo_initialized);
 	cbus_write_reg(TAHVO_ID, reg, val);
@@ -104,7 +104,7 @@ void tahvo_write_reg(int reg, u16 val)
  *
  * This function sets and clears the specified Tahvo register bits atomically
  */
-void tahvo_set_clear_reg_bits(int reg, u16 set, u16 clear)
+void tahvo_set_clear_reg_bits(unsigned reg, u16 set, u16 clear)
 {
 	unsigned long flags;
 	u16 w;
diff --git a/drivers/cbus/tahvo.h b/drivers/cbus/tahvo.h
index b4c6f50..97d6583 100644
--- a/drivers/cbus/tahvo.h
+++ b/drivers/cbus/tahvo.h
@@ -40,9 +40,9 @@
 #define MAX_TAHVO_IRQ_HANDLERS	8
 
 int tahvo_get_status(void);
-int tahvo_read_reg(int reg);
-void tahvo_write_reg(int reg, u16 val);
-void tahvo_set_clear_reg_bits(int reg, u16 set, u16 clear);
+int tahvo_read_reg(unsigned reg);
+void tahvo_write_reg(unsigned reg, u16 val);
+void tahvo_set_clear_reg_bits(unsigned reg, u16 set, u16 clear);
 int tahvo_request_irq(int id, void *irq_handler, unsigned long arg, char *name);
 void tahvo_free_irq(int id);
 void tahvo_enable_irq(int id);
-- 
1.7.11.2

