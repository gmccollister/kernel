From b51ee7b917e7f1b81e60d0b887282ceff31e00de Mon Sep 17 00:00:00 2001
From: Vaibhav Bedia <vaibhav.bedia@ti.com>
Date: Wed, 14 Mar 2012 22:52:09 +0530
Subject: [PATCH 0915/1092] cpufreq: OMAP: AM33XX: Use PM notifiers to scale
 voltage in suspend

Use the PM notifiers to scale down the frequency and voltage in the
suspend path and then block any further transitions till the system
resumes.

NOTE: THIS PATCH HAS CHECKPATCH ERRORS WHICH VIM IS NOT WILLING
TO REMOVE RIGHT NOW :(

Signed-off-by: Vaibhav Bedia <vaibhav.bedia@ti.com>
---
 drivers/cpufreq/omap-cpufreq.c | 31 +++++++++++++++++++++++++++----
 1 file changed, 27 insertions(+), 4 deletions(-)

diff --git a/drivers/cpufreq/omap-cpufreq.c b/drivers/cpufreq/omap-cpufreq.c
index 39d8d36..0d1d070 100644
--- a/drivers/cpufreq/omap-cpufreq.c
+++ b/drivers/cpufreq/omap-cpufreq.c
@@ -45,6 +45,10 @@
 #define MPU_TOLERANCE	4
 #define PER_ROUND_VAL	100
 
+/* Use 275MHz when entering suspend */
+#define SLEEP_FREQ	(275 * 1000)
+
+
 #ifdef CONFIG_SMP
 struct lpj_info {
 	unsigned long	ref;
@@ -237,14 +241,33 @@ static inline void freq_table_free(void)
 }
 
 static int omap_pm_notify(struct notifier_block *nb, unsigned long event,
-	void *dummy)
+                                void *dummy)
 {
+	struct cpufreq_policy *policy = cpufreq_cpu_get(0);
+	static unsigned int saved_frequency;
+
 	mutex_lock(&omap_cpu_lock);
-	if (event == PM_SUSPEND_PREPARE) {
+	switch (event) {
+	case PM_SUSPEND_PREPARE:
+		if (is_suspended)
+			goto out;
+
+                saved_frequency = omap_getspeed(0);
+
+                mutex_unlock(&omap_cpu_lock);
+		omap_target(policy, SLEEP_FREQ, CPUFREQ_RELATION_H);
+		mutex_lock(&omap_cpu_lock);
 		is_suspended = true;
-	} else if (event == PM_POST_SUSPEND) {
-		is_suspended = false;
+                break;
+
+        case PM_POST_SUSPEND:
+                is_suspended = false;
+                mutex_unlock(&omap_cpu_lock);
+		omap_target(policy, saved_frequency, CPUFREQ_RELATION_H);
+		mutex_lock(&omap_cpu_lock);
+                break;
 	}
+out:
 	mutex_unlock(&omap_cpu_lock);
 
 	return NOTIFY_OK;
-- 
1.7.11.2

