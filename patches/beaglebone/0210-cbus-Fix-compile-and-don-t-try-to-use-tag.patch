From da2e1a9897340ae89cb663623ae6b20efe8a3297 Mon Sep 17 00:00:00 2001
From: Tony Lindgren <tony@atomide.com>
Date: Tue, 28 Sep 2010 12:00:26 -0700
Subject: [PATCH 0210/1092] cbus: Fix compile and don't try to use tag

Fix compile and don't try to use tag

This should be really passed as platform_data from
the board-*.c files.

Signed-off-by: Tony Lindgren <tony@atomide.com>
---
 drivers/cbus/cbus.c       | 32 ++++++++++++++++++--------------
 drivers/cbus/retu-user.c  |  1 +
 drivers/cbus/retu.c       | 19 ++++++++++---------
 drivers/cbus/tahvo-user.c |  1 +
 drivers/cbus/tahvo.c      | 21 +++++++++++----------
 5 files changed, 41 insertions(+), 33 deletions(-)

diff --git a/drivers/cbus/cbus.c b/drivers/cbus/cbus.c
index 286b7ff..c80cede 100644
--- a/drivers/cbus/cbus.c
+++ b/drivers/cbus/cbus.c
@@ -30,10 +30,10 @@
 #include <linux/spinlock.h>
 #include <linux/gpio.h>
 
-#include <plat/board.h>
-#include <mach/board-nokia.h>
-
 #include <asm/io.h>
+#include <asm/mach-types.h>
+
+#include <plat/board.h>
 
 #include "cbus.h"
 
@@ -144,7 +144,7 @@ static int cbus_transfer(struct cbus_host *host, int dev, int reg, int data)
 	u32 base;
 
 #ifdef CONFIG_ARCH_OMAP1
-	base = OMAP1_IO_ADDRESS(OMAP_MPUIO_BASE);
+	base = OMAP1_IO_ADDRESS(OMAP1_MPUIO_BASE);
 #else
 	base = 0;
 #endif
@@ -221,7 +221,6 @@ int cbus_write_reg(struct cbus_host *host, int dev, int reg, u16 val)
 
 int __init cbus_bus_init(void)
 {
-	const struct omap_cbus_config * cbus_config;
 	struct cbus_host *chost;
 	int ret;
 
@@ -233,17 +232,22 @@ int __init cbus_bus_init(void)
 
 	spin_lock_init(&chost->lock);
 
-	cbus_config = omap_get_config(OMAP_TAG_CBUS, struct omap_cbus_config);
-
-	if (cbus_config == NULL) {
-		printk(KERN_ERR "cbus: Unable to retrieve config data\n");
-		return -ENODATA;
+	/* REVISIT: Pass these from board-*.c files in platform_data */
+	if (machine_is_nokia770()) {
+		chost->clk_gpio = OMAP_MPUIO(11);
+		chost->dat_gpio = OMAP_MPUIO(10);
+		chost->sel_gpio = OMAP_MPUIO(9);
+	} else if (machine_is_nokia_n800() || machine_is_nokia_n810() ||
+			machine_is_nokia_n810_wimax()) {
+		chost->clk_gpio = 66;
+		chost->dat_gpio = 65;
+		chost->sel_gpio = 64;
+	} else {
+		printk(KERN_ERR "cbus: Unsupported board\n");
+		ret = -ENODEV;
+		goto exit1;
 	}
 
-	chost->clk_gpio = cbus_config->clk_gpio;
-	chost->dat_gpio = cbus_config->dat_gpio;
-	chost->sel_gpio = cbus_config->sel_gpio;
-
 #ifdef CONFIG_ARCH_OMAP1
 	if (!OMAP_GPIO_IS_MPUIO(chost->clk_gpio) ||
 	    !OMAP_GPIO_IS_MPUIO(chost->dat_gpio) ||
diff --git a/drivers/cbus/retu-user.c b/drivers/cbus/retu-user.c
index 74a7d61..0f35dc5 100644
--- a/drivers/cbus/retu-user.c
+++ b/drivers/cbus/retu-user.c
@@ -31,6 +31,7 @@
 #include <linux/poll.h>
 #include <linux/list.h>
 #include <linux/spinlock.h>
+#include <linux/sched.h>
 #include <linux/mutex.h>
 
 #include <asm/uaccess.h>
diff --git a/drivers/cbus/retu.c b/drivers/cbus/retu.c
index ebdc2a0..39493fb 100644
--- a/drivers/cbus/retu.c
+++ b/drivers/cbus/retu.c
@@ -38,10 +38,10 @@
 #include <linux/gpio.h>
 
 #include <asm/uaccess.h>
+#include <asm/mach-types.h>
 
 #include <plat/mux.h>
 #include <plat/board.h>
-#include <mach/board-nokia.h>
 
 #include "cbus.h"
 #include "retu.h"
@@ -321,21 +321,22 @@ static void retu_power_off(void)
  */
 static int __devinit retu_probe(struct device *dev)
 {
-	const struct omap_em_asic_bb5_config * em_asic_config;
 	int rev, ret;
 
 	/* Prepare tasklet */
 	tasklet_init(&retu_tasklet, retu_tasklet_handler, 0);
 
-	em_asic_config = omap_get_config(OMAP_TAG_EM_ASIC_BB5,
-					 struct omap_em_asic_bb5_config);
-	if (em_asic_config == NULL) {
-		printk(KERN_ERR PFX "Unable to retrieve config data\n");
-		return -ENODATA;
+	/* REVISIT: Pass these from board-*.c files in platform_data */
+	if (machine_is_nokia770()) {
+		retu_irq_pin = 62;
+	} else if (machine_is_nokia_n800() || machine_is_nokia_n810() ||
+			machine_is_nokia_n810_wimax()) {
+		retu_irq_pin = 108;
+	} else {
+		printk(KERN_ERR "cbus: Unsupported board for tahvo\n");
+		return -ENODEV;
 	}
 
-	retu_irq_pin = em_asic_config->retu_irq_gpio;
-
 	if ((ret = gpio_request(retu_irq_pin, "RETU irq")) < 0) {
 		printk(KERN_ERR PFX "Unable to reserve IRQ GPIO\n");
 		return ret;
diff --git a/drivers/cbus/tahvo-user.c b/drivers/cbus/tahvo-user.c
index 873d648..c0e8daf 100644
--- a/drivers/cbus/tahvo-user.c
+++ b/drivers/cbus/tahvo-user.c
@@ -31,6 +31,7 @@
 #include <linux/poll.h>
 #include <linux/list.h>
 #include <linux/spinlock.h>
+#include <linux/sched.h>
 #include <linux/mutex.h>
 
 #include <asm/uaccess.h>
diff --git a/drivers/cbus/tahvo.c b/drivers/cbus/tahvo.c
index b262bf6..51d8128 100644
--- a/drivers/cbus/tahvo.c
+++ b/drivers/cbus/tahvo.c
@@ -38,10 +38,10 @@
 #include <linux/gpio.h>
 
 #include <asm/uaccess.h>
+#include <asm/mach-types.h>
 
 #include <plat/mux.h>
 #include <plat/board.h>
-#include <mach/board-nokia.h>
 
 #include "cbus.h"
 #include "tahvo.h"
@@ -289,19 +289,11 @@ void tahvo_free_irq(int id)
  */
 static int __devinit tahvo_probe(struct device *dev)
 {
-	const struct omap_em_asic_bb5_config * em_asic_config;
 	int rev, id, ret;
 
 	/* Prepare tasklet */
 	tasklet_init(&tahvo_tasklet, tahvo_tasklet_handler, 0);
 
-	em_asic_config = omap_get_config(OMAP_TAG_EM_ASIC_BB5,
-					 struct omap_em_asic_bb5_config);
-	if (em_asic_config == NULL) {
-		printk(KERN_ERR PFX "Unable to retrieve config data\n");
-		return -ENODATA;
-	}
-
 	tahvo_initialized = 1;
 
 	rev = tahvo_read_reg(TAHVO_REG_ASICR);
@@ -321,7 +313,16 @@ static int __devinit tahvo_probe(struct device *dev)
 	printk(KERN_INFO "%s v%d.%d found\n", tahvo_is_betty ? "Betty" : "Tahvo",
 	       (rev >> 4) & 0x0f, rev & 0x0f);
 
-	tahvo_irq_pin = em_asic_config->tahvo_irq_gpio;
+	/* REVISIT: Pass these from board-*.c files in platform_data */
+	if (machine_is_nokia770()) {
+		tahvo_irq_pin = 40;
+	} else if (machine_is_nokia_n800() || machine_is_nokia_n810() ||
+			machine_is_nokia_n810_wimax()) {
+		tahvo_irq_pin = 111;
+	} else {
+		printk(KERN_ERR "cbus: Unsupported board for tahvo\n");
+		return -ENODEV;
+	}
 
 	if ((ret = gpio_request(tahvo_irq_pin, "TAHVO irq")) < 0) {
 		printk(KERN_ERR PFX "Unable to reserve IRQ GPIO\n");
-- 
1.7.11.2

